{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","useState","selected","setSelected","amount","setAmount","principal","setPrincipal","interest","setInterest","time","setTime","className","searchable","isOptionDisabled","option","isdisabled","value","onChange","sel","console","log","options","label","onSubmit","event","parseFloat","preventDefault","type","target","htmlFor","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.063756a2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selected, setSelected] = useState(\"\");\n\n  const [amount, setAmount] = useState(\"\");\n\n  const [principal, setPrincipal] = useState(\"\");\n  const [interest, setInterest] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  const options = [\n    { value: \"si\", label: \"Simple Interest\" },\n    { value: \"ci\", label: \"Compound Interest\" },\n    { value: \"pvm\", label: \"Present Value of Money\", isdisabled: true },\n    { value: \"fvm\", label: \"Future Value of Money\", isdisabled: true },\n  ];\n\n  const simpleInterest = () => {\n    setAmount(\n      parseFloat(principal) + parseFloat(principal * (interest / 100) * time)\n    );\n  };\n\n  const compoundInterest = () => {\n    setAmount(principal * (1 + interest / 100) ** time);\n  };\n\n  const handleInterest = (event) => {\n    if (selected.value === \"si\") simpleInterest();\n    else compoundInterest();\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"main-heading\">Investment Helper</h1>\n      </header>\n\n      <main>\n        <Select\n          searchable={false}\n          isOptionDisabled={(option) => option.isdisabled}\n          className=\"select\"\n          value={selected}\n          onChange={(sel) => {\n            console.log(sel);\n            setAmount(\"\");\n            setPrincipal(\"\");\n            setInterest(\"\");\n            setTime(\"\");\n            setSelected(sel);\n          }}\n          options={options}\n        ></Select>\n        {(selected.value === \"si\" || selected.value === \"ci\") && (\n          <section>\n            <form onSubmit={handleInterest}>\n              <div className=\"float-label\">\n                <input\n                  type=\"tel\"\n                  value={principal}\n                  onChange={(event) => {\n                    setPrincipal(event.target.value);\n                  }}\n                />\n                <label\n                  className={principal !== \"\" ? \"active\" : \"\"}\n                  htmlFor=\"principal\"\n                >\n                  Principal\n                </label>\n              </div>\n              <div className=\"float-label\">\n                <input\n                  type=\"tel\"\n                  value={interest}\n                  onChange={(event) => {\n                    setInterest(event.target.value);\n                  }}\n                />\n                <label\n                  className={interest !== \"\" ? \"active\" : \"\"}\n                  htmlFor=\"Interest\"\n                >\n                  Return\n                </label>\n              </div>\n              <div className=\"float-label\">\n                <input\n                  type=\"tel\"\n                  value={time}\n                  onChange={(event) => {\n                    setTime(event.target.value);\n                  }}\n                />\n                <label className={time !== \"\" ? \"active\" : \"\"} htmlFor=\"time\">\n                  Time\n                </label>\n              </div>\n              <button disabled={!principal || !interest || !time}>\n                Calculate\n              </button>\n            </form>\n          </section>\n        )}\n        {selected && (\n          <div className=\"float-label amount\">\n            <input disabled type=\"text\" value={amount} />\n            <label className={amount !== \"\" ? \"active\" : \"\"} htmlFor=\"Interest\">\n              Amount\n            </label>\n          </div>\n        )}\n      </main>\n\n      <footer>\n        <p>Made with ‚ù§ by Chaitanya Raj</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}